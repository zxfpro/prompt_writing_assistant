# 1. 依赖注入（Dependency Injection）
# 依赖注入是一种设计模式，通过将类的依赖项注入到类的实例中，而不是由类自行创建或管理其依赖项。这种模式促进了代码的松耦合和可测试性。

# 2. 生产者-消费者模式（Producer-Consumer Pattern）
# 前面已经介绍过，该模式解决了生产者和消费者之间的同步问题，常用于多线程环境下的数据共享和同步。


# 4. 资源池模式（Object Pool Pattern）
# 资源池模式管理一个对象池，这些对象可以被重复使用，而不是每次都重新创建和销毁。这种模式适用于管理连接池、线程池、内存池等。

# 4. 黑板模式（Blackboard Pattern）
# 黑板模式用于解决复杂问题，涉及多个专家系统或知识源。所有组件都通过一个共享的黑板进行通信和协作。
# """


"""
创建型模式：关注对象的创建过程。
 结构型模式：关注类和对象的组合与结构。
 行为型模式：关注对象之间的通信、协作和职责分配。
"""